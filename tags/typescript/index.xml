<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>TypeScript - Tag - Hi, Shihao</title>
        <link>http://miaoshihao.com/tags/typescript/</link>
        <description>TypeScript - Tag - Hi, Shihao</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>miao.shihaoo@gmail.com (Shihao Miao)</managingEditor>
            <webMaster>miao.shihaoo@gmail.com (Shihao Miao)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 15 Jan 2021 11:53:26 &#43;0800</lastBuildDate><atom:link href="http://miaoshihao.com/tags/typescript/" rel="self" type="application/rss+xml" /><item>
    <title>TypeScript Notes 2 Function</title>
    <link>http://miaoshihao.com/notes/computerscience/language/typescript/typescript_notes_2_function/</link>
    <pubDate>Fri, 15 Jan 2021 11:53:26 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://miaoshihao.com/notes/computerscience/language/typescript/typescript_notes_2_function/</guid>
    <description><![CDATA[Function Named Functions A named function is one where you declare and call a function by its given name.
1 2 3 4 5  function display() { console.log(&#34;Hello TypeScript!&#34;); } display(); //Output: Hello TypeScript   Functions can also include parameter types and return type.
1 2 3 4 5  function Sum(x: number, y: number) : number { return x + y; } Sum(2,3); // returns 5   Anonymous Function An anonymous function are stored in a variable.]]></description>
</item><item>
    <title>TypeScript Notes 3 Object Oriented</title>
    <link>http://miaoshihao.com/notes/computerscience/language/typescript/typescript_notes_3_objectoriented/</link>
    <pubDate>Fri, 15 Jan 2021 11:53:26 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://miaoshihao.com/notes/computerscience/language/typescript/typescript_notes_3_objectoriented/</guid>
    <description><![CDATA[Class in TypeScript A class can include the following:
Constructor Properties Methods
1 2 3 4 5 6 7 8 9 10 11 12 13  class Employee { empCode: number; empName: string; constructor(code: number, name: string) { this.empName = name; this.empCode = code; } getSalary() : number { return 10000; } }   Inheritance in TypeScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  class Person { name: string; constructor(name: string) { this.]]></description>
</item><item>
    <title>TypeScript Notes 1 Intro</title>
    <link>http://miaoshihao.com/notes/computerscience/language/typescript/typescript_notes_1_intro/</link>
    <pubDate>Fri, 15 Jan 2021 11:53:26 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://miaoshihao.com/notes/computerscience/language/typescript/typescript_notes_1_intro/</guid>
    <description><![CDATA[Introduction TypeScript is a statically-typed superset of JavaScript. TypeScript can be transferred to JavaScript.
Environmental Setup How to install TypeScript 1  npm install -g typescript   How to transfer TypeScript to JavaScript 1  npx tsc greeter.ts   1  npx tsc greeter.ts --out ../dist/greeter.js   How to run JavaScript in shell 1  node greeter.js   How to create configuration file 1  npx tsc --init   Configuration The presence of a tsconfig.]]></description>
</item></channel>
</rss>
