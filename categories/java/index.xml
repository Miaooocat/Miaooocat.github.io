<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Java - Category - Hi, Shihao</title>
        <link>http://miaoshihao.com/categories/java/</link>
        <description>Java - Category - Hi, Shihao</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>miao.shihaoo@gmail.com (Shihao Miao)</managingEditor>
            <webMaster>miao.shihaoo@gmail.com (Shihao Miao)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 03 May 2021 20:51:21 &#43;0800</lastBuildDate><atom:link href="http://miaoshihao.com/categories/java/" rel="self" type="application/rss+xml" /><item>
    <title>JVM Object Initializaton</title>
    <link>http://miaoshihao.com/notes/computerscience/language/java/advancejava/jvm/jvm_intro/</link>
    <pubDate>Mon, 03 May 2021 20:51:21 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://miaoshihao.com/notes/computerscience/language/java/advancejava/jvm/jvm_intro/</guid>
    <description><![CDATA[Lifetime of a Type This note discusses how JVM create a object type from class file. It has three stages, namely, loading, linking and Initialization.
Loading Class loading is a process to create java.lang.Class, which stores the corresponding class information of a type.
java.lang.Class java.lang.Class class instance represent classes, interfaces, primitives, void, and arrays in a running Java application. It has no public constructor.
Class object contains meta-information about class.]]></description>
</item><item>
    <title>Java8 Stream </title>
    <link>http://miaoshihao.com/notes/computerscience/language/java/basicjava/java8_notes_stream/</link>
    <pubDate>Wed, 02 Oct 2019 20:50:26 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://miaoshihao.com/notes/computerscience/language/java/basicjava/java8_notes_stream/</guid>
    <description><![CDATA[A stream represents a sequence of elements and supports different kind of operations to perform computations upon those elements:
1 2 3 4 5 6 7 8 9  List&lt;String&gt; myList = Arrays.asList(&#34;a1&#34;, &#34;a2&#34;, &#34;b1&#34;, &#34;c2&#34;, &#34;c1&#34;); myList .stream() .filter(s -&gt; s.startsWith(&#34;c&#34;)) .map(String::toUpperCase) .sorted() .forEach(System.out::println);   Stream Creation Calling the method stream() on a list of objects returns a regular object stream.
1 2 3 4  Arrays.asList(&#34;a1&#34;, &#34;a2&#34;, &#34;a3&#34;) .]]></description>
</item><item>
    <title>Java8 Optional class</title>
    <link>http://miaoshihao.com/notes/computerscience/language/java/basicjava/java8_notes_option/</link>
    <pubDate>Sat, 28 Sep 2019 20:50:46 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://miaoshihao.com/notes/computerscience/language/java/basicjava/java8_notes_option/</guid>
    <description><![CDATA[Optional class is a container for null. The primary design goal for Optional is to be used as the return value of functions when a return value might be absent. The intent is that the caller immediately check the Optional and extract the actual value if it&rsquo;s present. If the value is absent, the caller can substitute a default value, throw an exception, or apply some other policy. This is typically done by chaining fluent method calls off the end of a stream pipeline (or other methods) that return Optional values.]]></description>
</item><item>
    <title>Java Notes(1) Introduction</title>
    <link>http://miaoshihao.com/notes/computerscience/language/java/basicjava/java_notes_1_introduction/</link>
    <pubDate>Thu, 13 Jun 2019 16:58:26 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://miaoshihao.com/notes/computerscience/language/java/basicjava/java_notes_1_introduction/</guid>
    <description><![CDATA[Java Features and Program Execution Java is a programming language and a platform.
Platform: Any hardware or software environment in which a program runs, is known as a platform. Since Java has its own runtime environment (JRE) and Application Programming Interface (API), it is called platform.
Features of Java :   Simple:
 User friendly syntax based on C++ It has Automatic Garbage Collection It has Rich set of APIs Removed confusing features - explicit pointers, operator overloading, multiple inheritance, etc    Object-oriented:]]></description>
</item><item>
    <title>Java Notes(2) Object Oriented Language</title>
    <link>http://miaoshihao.com/notes/computerscience/language/java/basicjava/java_notes_2_oop/</link>
    <pubDate>Mon, 17 Jun 2019 15:58:26 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://miaoshihao.com/notes/computerscience/language/java/basicjava/java_notes_2_oop/</guid>
    <description><![CDATA[Object Oriented Object-Oriented Programming is a methodology or paradigm to design a program using classes and objects. It simplifies the software development and maintenance.
Class  A class in Java can contain: field(variable, attribute), methods, constructors, blocks, nested class and interface. Object is an instance of a class. There is only one way to define class in java using class keyword. The Object class is the parent class of all the classes in java by default.]]></description>
</item><item>
    <title>Java Notes(3) Collection Framework</title>
    <link>http://miaoshihao.com/notes/computerscience/language/java/basicjava/java_notes_3_collection/</link>
    <pubDate>Tue, 16 Jul 2019 15:58:26 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://miaoshihao.com/notes/computerscience/language/java/basicjava/java_notes_3_collection/</guid>
    <description><![CDATA[The java.util package contains all the classes and interfaces for Collection framework.
Map : An object that maps keys to values. A map is not ordered and cannot contain duplicate keys (but can contain duplicate values). Each key can map to at most one value.
Collection : A collection represents a group of objects, known as its elements. The JDK provides implementations of more specific subinterfaces like Set and List.]]></description>
</item><item>
    <title>Java Notes(4) Generic</title>
    <link>http://miaoshihao.com/notes/computerscience/language/java/basicjava/java_notes_4_generics/</link>
    <pubDate>Fri, 05 Jul 2019 19:50:26 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://miaoshihao.com/notes/computerscience/language/java/basicjava/java_notes_4_generics/</guid>
    <description><![CDATA[Generic Classes A generic class declaration looks like a non-generic class declaration, except that the class name is followed by a type parameter section.
The type parameter section of a generic class can have one or more type parameters separated by commas. These classes are known as parameterized classes or parameterized types because they accept one or more parameters.
Syntax:
1 2 3  public class Box&lt;T&gt; { private T t; }   Box âˆ’ Box is a generic class.]]></description>
</item><item>
    <title>Java Notes(5) Error and Exception Handling</title>
    <link>http://miaoshihao.com/notes/computerscience/language/java/basicjava/java_notes_5_errors_and_exception_handling/</link>
    <pubDate>Thu, 25 Jul 2019 15:58:26 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://miaoshihao.com/notes/computerscience/language/java/basicjava/java_notes_5_errors_and_exception_handling/</guid>
    <description><![CDATA[Exception Handling in Java Exception is an event that disrupts the normal flow of the program. It is an object which is thrown at runtime. The exception handling in java is one of the powerful mechanism to handle the runtime errors so that normal flow of the application can be maintained.
 An Error &ldquo;indicates serious problems that a reasonable application should not try to catch.&rdquo; An Exception &ldquo;indicates conditions that a reasonable application might want to catch.]]></description>
</item><item>
    <title>Java Notes(6) String</title>
    <link>http://miaoshihao.com/notes/computerscience/language/java/basicjava/java_notes_6_string/</link>
    <pubDate>Fri, 26 Jul 2019 20:58:26 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://miaoshihao.com/notes/computerscience/language/java/basicjava/java_notes_6_string/</guid>
    <description><![CDATA[String, in general, is a sequence of characters. But in Java, string is an object that represents a sequence of character.
CharSequence Interface: The CharSequence interface is used to represent the sequence of characters. The Charsequence interface is extended in three class namely String, StringBuffer, and StringBuilder classes.
String Class  By String literal  1 2 3  String s1 = &#34;Welcome&#34;; // This doesn&#39;t create a new instance. String s2 = &#34;Welcome&#34;;   In the above example, only one object will be created.]]></description>
</item><item>
    <title>Java Notes(7) Nested and Anonymous Class </title>
    <link>http://miaoshihao.com/notes/computerscience/language/java/basicjava/java_notes_7_anonymouse_class/</link>
    <pubDate>Fri, 26 Jul 2019 22:50:26 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://miaoshihao.com/notes/computerscience/language/java/basicjava/java_notes_7_anonymouse_class/</guid>
    <description><![CDATA[Nested Class In Java, just like methods, variables of a class too can have another class as its member. Writing a class within another is allowed in Java. The class written within is called the nested class, and the class that holds the inner class is called the outer class.
1 2 3 4 5 6 7 8  public class Outer { public class Inner { } } Outer.Inner inner = outer.]]></description>
</item></channel>
</rss>
