<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Markdown Syntax]]></title>
    <url>%2F2019%2F03%2F30%2FMarkdown_Syntax%2F</url>
    <content type="text"><![CDATA[About this pageThis page refers to the Markdown guide basic syntax. The purpose of making such document is to test out the different syntax of Markdown. 0. Important Note Using Markdown doesn’t mean that we can’t also use HTML. It is possible to add HTML tags to any Markdown file. 1. HeadingTo create a heading, add number signs (#) in front. The number of number signs correspnd to the heading level.| Markdown ||———————|| # Heading level 1 || ## Heading level 2 | | ###### Heading level 6 | 2. EmphasisMarkdown support emphasis by making text bold or italic.| Markdown | Rendered Output ||———————| -|| Italic: |Italic|| Bold | Bold|| Bold and Italic | Bold and Italic|| ~~ StrikeThrough~~ | StrikeThrough| *No space in the above Markdown block 3. BlockquotesTo create a blockquote, add a &gt; in front of a paragraph. &gt; Reference &gt;&gt;Nested Blockquotes Reference Nested Blockquotes 4. Divide lineTo create a horizontal line, use three or more asterisks (***), dashes (—), or underscores (___) on a line by themselves.*** 5. PictureTo add an image, add an exclamation mark (!), followed by alt text in brackets, and the path or URL to the image asset in parentheses. You can optionally add a title after the URL in the parentheses. ![Picture title](Picture address&apos;&apos;Picture content when cursor move on that) 6. FlowChartTo create a flow chart, use the following format 1234567st=&gt;start: Startop=&gt;operation: My Operation cond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(no)-&gt;opcond(yes)-&gt;e 1234567st=&gt;start: Startop=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(no)-&gt;opcond(yes)-&gt;e 7. TableName|Name|Name —(left alignment)|:–:(center)|—:(right alignment) Content|Content|Content Content|Content|ContentName|Name|Name—|:–:|—:Content|Content|ContentContent|Content|Content 8. CodeTo denote a word or phrase as code, enclose it in two tick marks (One at front, one at back).Hello WorldTo create code blocks, indent every line of the block by at least four spaces or one tab, or enclose it in 6 tick marks in each side).123456```#include &lt;stdio.h&gt;int main()&#123; printf(&quot;Hello, World!&quot;); return 0;&#125; 9. LinkTo create a link, enclose the link text in brackets (e.g., [Google]) and then follow it immediately with the URL in parentheses (e.g., (www.google.com)).This is a hyperlink Google 10. URLs and Email AddressesTo quickly turn a URL or email address into a link, enclose it in angle brackets.12&lt;https://www.markdownguide.org&gt;&lt;fake@example.com&gt; The rendered output looks like this:https://www.markdownguide.org&#x66;&#97;&#107;&#101;&#x40;&#101;&#120;&#x61;&#x6d;&#x70;&#x6c;&#101;&#46;&#99;&#x6f;&#109;]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo music player - Aplayer]]></title>
    <url>%2F2019%2F03%2F30%2FMusicAPI%2F</url>
    <content type="text"><![CDATA[About this postThis post is about to use Aplayer to set up a music player that can play music list from major music servers including netease, tencent, xiami, kugou and baidu in my blog (powered by hexo). SourceAplayer is a HTML5 music player, and MetingJS is used to interprete music hyperlink. hexo-tag-player Install Instruction:https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md Following this instruction, you could add a music player in your blog. However, it requires you to build a music list. The list requires your to give music link yourself.Thus, we could use the following code as an alternative that helps to transfer music playlist ID to music. 1234567891011121314const apFixed = new APlayer(&#123; element: document.getElementById(&apos;aplayer&apos;), mutex: true, theme: &apos;#97dffd&apos;, order: &apos;random&apos;, lrcType: 3, fixed: true,&#125;);$.ajax(&#123; url: &apos;https://api.i-meto.com/meting/api?server=netease&amp;type=playlist&amp;id=60198&apos;, success: function (list) &#123; apFixed.list.add(JSON.parse(list)); &#125;&#125;); P.S.,禁止一切商用这是一个用来在海外免费听国内音乐的办法。现在就算买了会员也把音乐禁了。在不想用VPN翻回国情况下只能这么办。原code 是从bilibili前端大神DIYgod的网站上用inspect-&gt;source扒下来的.]]></content>
      <categories>
        <category>Website</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的大学]]></title>
    <url>%2F2019%2F03%2F30%2FMyUniversiy%2F</url>
    <content type="text"><![CDATA[2019.03.30 修改些句子，发布到网站上了2018.08.04 初稿 为什么之前会选择材料专业？— 从2013-2018年来，这个问题已经回答过好多次，也听过好多人的回答。当年选择这个专业是抱着一个在本科能对所有工程科目有个大概的了解。就希望在从高中的被动学习到大学的主动学习期间能进行一个通识教育。然后在其中找到我喜欢的部分让它成为我一生的职业。而这五年上过的课包括了矿物处理，炼金，塑料，生物材料，高等数学，管理学，哲学，金融，数据分析还有编程。对于选择麦吉尔大学的材料专业，我没有什么遗憾。至少完成了当年刚进入大学的目标. 为什么想离开材料专业？— 只因为这是一个付出与回报并不对等的专业吧。这是一个工业届和学术届有明显断层的专业。而在工业里材料是必不可少缺却又是最不受重视的。材料的研发代表着不确定性的投入。而多数材料公司也不过是利用了一个概念来拉投资罢了。而在材料方面我有过三个实习。第一个实习是在西门子关于引擎的生产方面。而我所做的事情不过是保证每个procedure都能在specification找到其生产的规则。第二个实习是在McGill一个弄3-D打印的教授那里。虽说是材料，但是更多是关于电脑。在那个暑假我第一次接触到了数据处理和图像处理。这也让我萌发了转系的想法。第三个实习可以说就是实验室搬砖工作。而那个公司在我看来更多就是用一个概念去欺骗政府罢了。而材料性质的测试更多是一个人力穷举的过程。公司的大佬和我说过，真正材料的研发都是十年以上。就如3D打印从2012年大众熟悉到2018年教授说这个技术要工业化还是需要15年以上。而人生没有这么多十年。我不希望把这辈子投入未知的学术中，不愿意付出大量的努力却不能得到足够的成就感，更加不愿意用一个个明显子虚乌有的概念去误导他人。所以我离开了材料。在我可预见的未来，我在材料专业的路会越来越惨淡。原因有三。 第一，大量其他专业的博士涌入。比起机械，土木。生化材的博士毕业时间最短。材料发表文章相对来说是最容易的，而现在申请经费，评职称，评教职都和发的paper有关。大量博士生的涌入带来的将会是未来职业学历的虚高。在未来材料的职业中，一个博士学位就是基础。第二，工业的弱需求。材料在工业的研发投入的成本过高，但是回报率过低。 为什么选择CS？—我选择转系是因为在写每一个程序的时候感觉就像曾经玩游戏的体验。感觉自己在创造一个生命，而我需要的是去教会这个孩子他需要的技能。我可以感觉到我在和我创造的生命沟通。这或许就像以前玩帝国时代2吧，我喜欢的是在地图编辑器里面编辑不同的事件。或许那个就是我编程的启蒙吧。 那我这五年学到了什么？独立—我应该是一个非常爱哭的小孩吧。在大学的五年，深夜一个人因为生病哭过，送父母去温哥华后抱着妹妹的玩具也是一路带着眼泪坐车回家，大二连续几次的挂考试也哭过，后悔自己专业选择也哭过。但是每次都是擦干眼泪继续一个为自己的成长而努力。当年听着Leon说一定要逃离自己的舒适区而选择了Montreal。这些年一个人找工作，熬夜，刷题，考证，我经历过孤单。而独立在我心中的定义也改变了不少。从大一的时候刻意追求自己的独立而不和父母说一句话，到现在每周都和父母视频。独立对我来说的定义也从远离父母到承担责任。在这里真心要谢谢Shawn，从他身上学会了如何和父母相处。 终身学习的态度，结构化思考的能力，以及学习能力的提高— 和刚进大学的我相比，我已经学会如何从prof的notes，lecture上汲取到自己需要的知识，建立自己的知识结构。在考试的时候如何利用自己的理解来对自己没学过的领域进行瞎扯淡。— 学习也从单单从别人那里获得成就感，到为了自我成长而学习 时间管理能力与McGill的一些课— 拥有在规定时间内完成任务的能力，McGill的工程真的是一个折麽人的地方。就如开学的时候FACC100的prof说的 以后这辈子或许都不会有再像McGill 压力这么大的地方了。这五年来印象最深刻的几个作业包括了 MIME350 Extractive metallurgy的一个单人作业。和其他七个中国人连续不间断的算了差不多17个小时的数据。好多次数据算错了 导致好多次炼铁的温度都超出太阳表面了。 MIME465 Powder metallurgy的一个团队作业，第一次真正的开始了从设计实验，磨sample到最后写paper来验证书上的定理 MIME452 Process design的Capstone。非常具体的写了一本企业规划书。 MIME470 一门simulation的课。每次跑一个simulation都要超过10小时。还记得那时候拿着三台作业在同时写三个不同作业的时光。 COMP208 当debug了一个下午的一个check prime number 的program可以运行的时候，内心真的想大叫。 COMP250 如何靠两年前学过的C来硬写各种Java程序。从刚开始method，class都不会用，到后面终于把所有作业都拿满分了。 COMP273 用汇编写一个(Memory Mapped I/O)MMIO 的计算器。加上comment 写了1600行的code。每次出错后的debug真的是欲仙欲死。也是在这里第一次认识到了模块化的重要性。 COMP302的final project 实现programming language，这个作业是我大学这五年来第一个纯靠大佬carry下来的作业。最后我都还不是特别懂 COMP551 对于machine learning的各种操作来说 我只能说 未来已来，人类终将被取代。严谨的态度—材料加工的失败就意味着废品，同时生产过程的不严谨还可能产生事故，严重的可以涉及人命。—对于自己签字的东西，说过的话，报过的数据都是要负责任的 流程化的思想—分解细节的思路。工业生产过程都划分为一道道工序，组成生产流程。在硬件领域，也有流程化的实例，常见的表现为“量产”。当一种硬件可以脱离实验室进入量产阶段，那就是表示要流水线生产化。流程标准化是其表现之一，这需要设计人员去分解问题、透析、总结、再组合。 对于programming 也是 把一个需求分化成不同的小东西 如果我转系读研究生需要做到什么？—研究生需要带着一个目标去读。学会的知识将要更加结构化的记录 结语—不悔过去，不畏未来。每个人都应该会有年轻时候认知的局限。而时间能教会我们很多东西。时间到达一定长度的时候，就会发现那些曾经细微末节的改变，最后能长成能看到的样子。五年前的自己并不知道我那时候的选择是否正确。就如现在我也不会知道这个选择是否正确。但是如果人生能够重复，在相同的信息情况下我还是会选择去转系。 在这里需要感谢我的家庭让我人生再一次不会因为自己当年随意的选择而抱憾终生.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Java Programming: Principles of Software Design]]></title>
    <url>%2F2019%2F03%2F25%2FJava-Programming-Principles-of-Software-Design%2F</url>
    <content type="text"><![CDATA[About this courseComing Soon Module 1 Searching and Filtering dataAbout this moduleThe first module introduce a data set containing details about earthquakes around the world. It ask to1) Write a program that include multiple classes and arraylist of class types,2) Find the maximum value in an ArrayList,3) Use a Filter interface to search through data,4) Implement interfaces with method signatures and 5) combine several filter together. Relationships Between ClassesPOJO - Plain Old Java Object - is an ordinary Java object, not bound by any special restriction and not requiring any class path.The following code is essentially a POJO 123456789//Classpublic class QuakeEntry &#123; private Location myLocation; private String title; private double depth; private double magnitude; public QuakeEntry(...)&#123; &#125;&#125; 123456public class QuakeEntry &#123; public Location getLocation()&#123;.. public double getDepth()&#123;... public String getInfo()&#123;... ...&#125; 1234567// Objectpublic QuakeEntry(double lat, double lon, double mag, String t double d) &#123; myLocation = new Location(lat, lon); magnitude = mag; title = t; depth = d;&#125; Class in Java can have Has-A and Use-A relationshipC Licensing and APIsAPI: Application programming interface - a set of subroutine definitions, communication protocols, and tools for building software. Benefit of use that includes 1) code are well tested, 2) good documentation, 3) follows standards. Example of Android API (‘Location.java’)https://developer.android.com/reference/android/location/Location.html License: A license is an agreement between a developer and user on how a software product can be used. Example of Licensehttps://www.apache.org/licenses/LICENSE-2.0 Coding notes - Searching data12345// to check if a string start, contain or end with certain partpublic boolean startsWith(String prefix)public boolean endsWith(String prefix)// to check if a string start with certain prefix with an offsetpublic boolean startsWith(String prefix, int toffset) 1234567891011121314151617181920public ArrayList&lt;QuakeEntry&gt; getClosest(ArrayList&lt;QuakeEntry&gt; quakeData, Location current, int howMany) &#123; // Create an empty arraylist for return purpose ArrayList&lt;QuakeEntry&gt; ret = new ArrayList&lt;QuakeEntry&gt;(); // Copy the original list ArrayList&lt;QuakeEntry&gt; quakeData_copy = new ArrayList&lt;QuakeEntry&gt;(quakeData); // Use the inner loop to go over the copied arraylist, searching for closest // Use the outter loop to update return arraylist and copy arraylist for (int i=0;i&lt;howMany;i++)&#123; int miniindex=0; for (int j=0;j&lt;quakeData_copy.size();j++)&#123; QuakeEntry quake = quakeData_copy.get(j); Location temploc = quake.getLocation(); if(temploc.distanceTo(current)&lt;quakeData_copy.get(miniindex).getLocation().distanceTo(current))&#123; miniindex = j; &#125; &#125; ret.add(quakeData_copy.remove(miniindex)); &#125; return ret;&#125; Coding Assignment Week 1 Github: https://github.com/Miaooocat/Java_SoftwareDesignPrinciple_Coursera/tree/master/Week1 InterfacesClasses can implement an interface: * Must define the promised methods * Can be treated as the interface type Coding notes - Filtering dataFirst look at two filters to see similiarity:1234567public ArrayList&lt;QuakeEntry&gt; filterByMagnitude(ArrayList&lt;QuakeEntry&gt; quakeData, double magMin) &#123; ArrayList&lt;QuakeEntry&gt; answer = new ArrayList&lt;QuakeEntry&gt;(); for(QuakeEntry qe : quakeData) &#123; if (qe.getMagnitude() &gt;= magMin) &#123;answer.add(qe);&#125; &#125; return answer;&#125; 1234567public ArrayList&lt;QuakeEntry&gt; filterByDistanceFrom(ArrayList&lt;QuakeEntry&gt; quakeData, double distMax, Location from) &#123; ArrayList&lt;QuakeEntry&gt; answer = new ArrayList&lt;QuakeEntry&gt;(); for(QuakeEntry qe : quakeData) &#123; if (qe.getLocation().distanceTo(from) &lt;= distMax) &#123;answer.add(qe);&#125; &#125; return answer;&#125; The only differece is in the if block. Thus, we could parameterize the above code by filter. In here, filter is an interface.12345678public ArrayList&lt;QuakeEntry&gt;filter (ArrayList&lt;QuakeEntry&gt; quakeData, Filter f) &#123; ArrayList&lt;QuakeEntry&gt; answer = new ArrayList&lt;QuakeEntry&gt; (); for (QuakeEntry qe : quakeData) &#123; if (f.satisfies(qe)) &#123;answer.add(qe);&#125; &#125; return answer;&#125; 123public interface Filter &#123; public boolean satisfies(QuakeEntry qe);&#125; 123456789public class MinMagFilter implements Filter &#123; private double magMin; public MinMagFilter(double min) &#123; magMin = min; &#125; public boolean satisfies(QuakeEntry qe) &#123; return qe.getMagnitude() &gt;= magMin; &#125;&#125; 12345Filter f = new MinMagFilter(4.0);ArrayList&lt;QuakeEntry&gt; largeQuakes = filter(list, f);f = new DistanceFilter(myLoc,100);ArrayList&lt;QuakeEntry&gt; shallowQuakes = filter(list, f); How does Java know which f.satisified to call? The answer is Dynamic dispatch, which is a process of selecting which implementation of a polymorphic operation (method or function) to call at run time.]]></content>
      <categories>
        <category>Software Development</category>
        <category>Course Notes</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
