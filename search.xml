<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo music player - Aplayer</title>
      <link href="/2019/03/30/MusicAPI/"/>
      <url>/2019/03/30/MusicAPI/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="About-this-post"><a href="#About-this-post" class="headerlink" title="About this post"></a>About this post</h2><p>This post is about to use Aplayer to set up a music player that can play music list from major music servers including netease, tencent, xiami, kugou and baidu in my blog (powered by hexo).</p><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p>Aplayer is a HTML5 music player, and MetingJS is used to interprete music hyperlink. </p><blockquote><p>hexo-tag-player Install Instruction:<br><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md" target="_blank" rel="noopener">https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md</a></p></blockquote><p>Following this instruction, you could add a music player in your blog. However, it requires you to build a music list. The list requires your to give music link yourself.<br>Thus, we could use the following code as an alternative that helps to transfer music playlist ID to music.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const apFixed = new APlayer(&#123;</span><br><span class="line">  element: document.getElementById(&apos;aplayer&apos;),</span><br><span class="line">  mutex: true,</span><br><span class="line">  theme: &apos;#97dffd&apos;,</span><br><span class="line">  order: &apos;random&apos;,</span><br><span class="line">  lrcType: 3,</span><br><span class="line">  fixed: true,</span><br><span class="line">&#125;);</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  url: &apos;https://api.i-meto.com/meting/api?server=netease&amp;type=playlist&amp;id=60198&apos;,</span><br><span class="line">  success: function (list) &#123;</span><br><span class="line">    apFixed.list.add(JSON.parse(list));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="P-S"><a href="#P-S" class="headerlink" title="P.S.,"></a>P.S.,</h2><p><strong>禁止一切商用</strong><br>这是一个用来在海外免费听国内音乐的办法。现在就算买了会员也把音乐禁了。在不想用VPN翻回国情况下只能这么办。<br>原code 是从<a href="https://diygod.me/" target="_blank" rel="noopener">bilibili前端大神DIYgod</a>的网站上用inspect-&gt;source扒下来的.</p>]]></content>
      
      
      <categories>
          
          <category> Website </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown Syntax</title>
      <link href="/2019/03/30/Markdown_Syntax/"/>
      <url>/2019/03/30/Markdown_Syntax/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="About-this-page"><a href="#About-this-page" class="headerlink" title="About this page"></a>About this page</h2><p>This page refers to the <a href="https://www.markdownguide.org/basic-syntax" target="_blank" rel="noopener">Markdown guide basic syntax</a>. The purpose of making such document is to test out the different syntax of Markdown.</p><h2 id="0-Important-Note"><a href="#0-Important-Note" class="headerlink" title="0. Important Note"></a>0. Important Note</h2><p> Using Markdown doesn’t mean that we can’t also use HTML. It is possible to add HTML tags to any Markdown file. </p><h2 id="1-Heading"><a href="#1-Heading" class="headerlink" title="1. Heading"></a>1. Heading</h2><p>To create a heading, add number signs (#) in front. The number of number signs correspnd to the heading level.<br>| Markdown            |<br>|———————|<br>| # Heading level 1   |<br>| ## Heading level 2  |</p><h2 id="Heading-level-6"><a href="#Heading-level-6" class="headerlink" title="| ###### Heading level 6 | "></a>| ###### Heading level 6 | </h2><h2 id="2-Emphasis"><a href="#2-Emphasis" class="headerlink" title="2. Emphasis"></a>2. Emphasis</h2><p>Markdown support emphasis by making text bold or italic.<br>| Markdown            | Rendered Output          |<br>|———————| -|<br>| <em> Italic</em>: |<em>Italic</em>|<br>| <strong> Bold</strong>  | <strong>Bold</strong>|<br>| <strong><em> Bold and Italic</em></strong> |  <strong><em>Bold and Italic</em></strong>|<br>| ~~ StrikeThrough~~ | <del>StrikeThrough</del>|<br>    *No space in the above Markdown block</p><h2 id="3-Blockquotes"><a href="#3-Blockquotes" class="headerlink" title="3. Blockquotes"></a>3. Blockquotes</h2><p>To create a blockquote, add a &gt; in front of a paragraph.<br>    &gt; Reference<br>    &gt;&gt;Nested Blockquotes</p><blockquote><p>Reference</p><blockquote><p>Nested Blockquotes</p></blockquote></blockquote><h2 id="4-Divide-line"><a href="#4-Divide-line" class="headerlink" title="4. Divide line"></a>4. Divide line</h2><h2 id="To-create-a-horizontal-line-use-three-or-more-asterisks-dashes-—-or-underscores-on-a-line-by-themselves"><a href="#To-create-a-horizontal-line-use-three-or-more-asterisks-dashes-—-or-underscores-on-a-line-by-themselves" class="headerlink" title="To create a horizontal line, use three or more asterisks (***), dashes (—), or underscores (___) on a line by themselves."></a>To create a horizontal line, use three or more asterisks (***), dashes (—), or underscores (___) on a line by themselves.</h2><pre><code>***</code></pre><hr><h2 id="5-Picture"><a href="#5-Picture" class="headerlink" title="5. Picture"></a>5. Picture</h2><p>To add an image, add an exclamation mark (!), followed by alt text in brackets, and the path or URL to the image asset in parentheses. You can optionally add a title after the URL in the parentheses.</p><pre><code>![Picture title](Picture address&apos;&apos;Picture content whencursor move on that)</code></pre><h2 id="6-FlowChart"><a href="#6-FlowChart" class="headerlink" title="6. FlowChart"></a>6. FlowChart</h2><p>To create a flow chart, use the following format<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">    cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">cond(yes)-&gt;e</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">cond(yes)-&gt;e</span><br></pre></td></tr></table></figure><h2 id="7-Table"><a href="#7-Table" class="headerlink" title="7. Table"></a>7. Table</h2><p>Name|Name|Name<br>    —(left alignment)|:–:(center)|—:(right alignment)<br>    Content|Content|Content<br>    Content|Content|Content<br>Name|Name|Name<br>—|:–:|—:<br>Content|Content|Content<br>Content|Content|Content</p><h2 id="8-Code"><a href="#8-Code" class="headerlink" title="8. Code"></a>8. Code</h2><p>To denote a word or phrase as code, enclose it in two tick marks <code></code> (One at front, one at back).<br><code>Hello World</code><br>To create code blocks, indent every line of the block by at least four spaces or one tab, or enclose it in 6 tick marks <figure class="highlight plain"><figcaption><span>in each side).</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    printf(&quot;Hello, World!&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="9-Link"><a href="#9-Link" class="headerlink" title="9. Link"></a>9. Link</h2><p>To create a link, enclose the link text in brackets (e.g., [Google]) and then follow it immediately with the URL in parentheses (e.g., (<a href="http://www.google.com))" target="_blank" rel="noopener">www.google.com))</a>.<br>This is a hyperlink <a href="www.google.com">Google</a></p><h2 id="10-URLs-and-Email-Addresses"><a href="#10-URLs-and-Email-Addresses" class="headerlink" title="10. URLs and Email Addresses"></a>10. URLs and Email Addresses</h2><p>To quickly turn a URL or email address into a link, enclose it in angle brackets.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;https://www.markdownguide.org&gt;</span><br><span class="line">&lt;fake@example.com&gt;</span><br></pre></td></tr></table></figure></p><p>The rendered output looks like this:<br><a href="https://www.markdownguide.org" target="_blank" rel="noopener">https://www.markdownguide.org</a><br><a href="mailto:&#102;&#97;&#x6b;&#x65;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#101;&#x2e;&#x63;&#x6f;&#x6d;" target="_blank" rel="noopener">&#102;&#97;&#x6b;&#x65;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#101;&#x2e;&#x63;&#x6f;&#x6d;</a></p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的大学</title>
      <link href="/2019/03/30/MyUniversiy/"/>
      <url>/2019/03/30/MyUniversiy/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>2019.03.30 修改些句子，发布到网站上了<br><del>2018.08.04 初稿</del></p><h2 id="为什么之前会选择材料专业？"><a href="#为什么之前会选择材料专业？" class="headerlink" title="为什么之前会选择材料专业？"></a>为什么之前会选择材料专业？</h2><p>— 从2013-2018年来，这个问题已经回答过好多次，也听过好多人的回答。当年选择这个专业是抱着一个在本科能对所有工程科目有个大概的了解。就希望在从高中的被动学习到大学的主动学习期间能进行一个通识教育。然后在其中找到我喜欢的部分让它成为我一生的职业。而这五年上过的课包括了矿物处理，炼金，塑料，生物材料，高等数学，管理学，哲学，金融，数据分析还有编程。对于选择麦吉尔大学的材料专业，我没有什么遗憾。至少完成了当年刚进入大学的目标.</p><h2 id="为什么想离开材料专业？"><a href="#为什么想离开材料专业？" class="headerlink" title="为什么想离开材料专业？"></a>为什么想离开材料专业？</h2><p>— 只因为这是一个付出与回报并不对等的专业吧。这是一个工业届和学术届有明显断层的专业。而在工业里材料是必不可少缺却又是最不受重视的。材料的研发代表着不确定性的投入。而多数材料公司也不过是利用了一个概念来拉投资罢了。而在材料方面我有过三个实习。第一个实习是在西门子关于引擎的生产方面。而我所做的事情不过是保证每个procedure都能在specification找到其生产的规则。第二个实习是在McGill一个弄3-D打印的教授那里。虽说是材料，但是更多是关于电脑。在那个暑假我第一次接触到了数据处理和图像处理。这也让我萌发了转系的想法。第三个实习可以说就是实验室搬砖工作。而那个公司在我看来更多就是用一个概念去欺骗政府罢了。而材料性质的测试更多是一个人力穷举的过程。公司的大佬和我说过，真正材料的研发都是十年以上。就如3D打印从2012年大众熟悉到2018年教授说这个技术要工业化还是需要15年以上。而人生没有这么多十年。我不希望把这辈子投入未知的学术中，不愿意付出大量的努力却不能得到足够的成就感，更加不愿意用一个个明显子虚乌有的概念去误导他人。所以我离开了材料。在我可预见的未来，我在材料专业的路会越来越惨淡。原因有三。 第一，大量其他专业的博士涌入。比起机械，土木。生化材的博士毕业时间最短。材料发表文章相对来说是最容易的，而现在申请经费，评职称，评教职都和发的paper有关。大量博士生的涌入带来的将会是未来职业学历的虚高。在未来材料的职业中，一个博士学位就是基础。第二，工业的弱需求。材料在工业的研发投入的成本过高，但是回报率过低。</p><h2 id="为什么选择CS？"><a href="#为什么选择CS？" class="headerlink" title="为什么选择CS？"></a>为什么选择CS？</h2><p>—我选择转系是因为在写每一个程序的时候感觉就像曾经玩游戏的体验。感觉自己在创造一个生命，而我需要的是去教会这个孩子他需要的技能。我可以感觉到我在和我创造的生命沟通。这或许就像以前玩帝国时代2吧，我喜欢的是在地图编辑器里面编辑不同的事件。或许那个就是我编程的启蒙吧。</p><h2 id="那我这五年学到了什么？"><a href="#那我这五年学到了什么？" class="headerlink" title="那我这五年学到了什么？"></a>那我这五年学到了什么？</h2><h3 id="独立"><a href="#独立" class="headerlink" title="独立"></a>独立</h3><p>—我应该是一个非常爱哭的小孩吧。在大学的五年，深夜一个人因为生病哭过，送父母去温哥华后抱着妹妹的玩具也是一路带着眼泪坐车回家，大二连续几次的挂考试也哭过，后悔自己专业选择也哭过。但是每次都是擦干眼泪继续一个为自己的成长而努力。当年听着Leon说一定要逃离自己的舒适区而选择了Montreal。这些年一个人找工作，熬夜，刷题，考证，我经历过孤单。而独立在我心中的定义也改变了不少。从大一的时候刻意追求自己的独立而不和父母说一句话，到现在每周都和父母视频。独立对我来说的定义也从远离父母到承担责任。在这里真心要谢谢Shawn，从他身上学会了如何和父母相处。</p><h3 id="终身学习的态度，结构化思考的能力，以及学习能力的提高"><a href="#终身学习的态度，结构化思考的能力，以及学习能力的提高" class="headerlink" title="终身学习的态度，结构化思考的能力，以及学习能力的提高"></a>终身学习的态度，结构化思考的能力，以及学习能力的提高</h3><p>— 和刚进大学的我相比，我已经学会如何从prof的notes，lecture上汲取到自己需要的知识，建立自己的知识结构。在考试的时候如何利用自己的理解来对自己没学过的领域进行瞎扯淡。<br>— 学习也从单单从别人那里获得成就感，到为了自我成长而学习</p><h3 id="时间管理能力与McGill的一些课"><a href="#时间管理能力与McGill的一些课" class="headerlink" title="时间管理能力与McGill的一些课"></a>时间管理能力与McGill的一些课</h3><p>— 拥有在规定时间内完成任务的能力，McGill的工程真的是一个折麽人的地方。就如开学的时候FACC100的prof说的 以后这辈子或许都不会有再像McGill 压力这么大的地方了。这五年来印象最深刻的几个作业包括了 </p><ol><li>MIME350 Extractive metallurgy的一个单人作业。和其他七个中国人连续不间断的算了差不多17个小时的数据。好多次数据算错了 导致好多次炼铁的温度都超出太阳表面了。</li><li>MIME465 Powder metallurgy的一个团队作业，第一次真正的开始了从设计实验，磨sample到最后写paper来验证书上的定理</li><li>MIME452 Process design的Capstone。非常具体的写了一本企业规划书。</li><li>MIME470 一门simulation的课。每次跑一个simulation都要超过10小时。还记得那时候拿着三台作业在同时写三个不同作业的时光。</li><li>COMP208 当debug了一个下午的一个check prime number 的program可以运行的时候，内心真的想大叫。</li><li>COMP250 如何靠两年前学过的C来硬写各种Java程序。从刚开始method，class都不会用，到后面终于把所有作业都拿满分了。</li><li>COMP273 用汇编写一个(Memory Mapped I/O)MMIO 的计算器。加上comment 写了1600行的code。每次出错后的debug真的是欲仙欲死。也是在这里第一次认识到了模块化的重要性。</li><li>COMP302的final project 实现programming language，这个作业是我大学这五年来第一个纯靠大佬carry下来的作业。最后我都还不是特别懂</li><li>COMP551 对于machine learning的各种操作来说 我只能说 未来已来，人类终将被取代。<h3 id="严谨的态度"><a href="#严谨的态度" class="headerlink" title="严谨的态度"></a>严谨的态度</h3>—材料加工的失败就意味着废品，同时生产过程的不严谨还可能产生事故，严重的可以涉及人命。<br>—对于自己签字的东西，说过的话，报过的数据都是要负责任的</li></ol><h3 id="流程化的思想"><a href="#流程化的思想" class="headerlink" title="流程化的思想"></a>流程化的思想</h3><p>—分解细节的思路。工业生产过程都划分为一道道工序，组成生产流程。在硬件领域，也有流程化的实例，常见的表现为“量产”。当一种硬件可以脱离实验室进入量产阶段，那就是表示要流水线生产化。流程标准化是其表现之一，这需要设计人员去分解问题、透析、总结、再组合。 对于programming 也是 把一个需求分化成不同的小东西</p><h3 id="如果我转系读研究生需要做到什么？"><a href="#如果我转系读研究生需要做到什么？" class="headerlink" title="如果我转系读研究生需要做到什么？"></a>如果我转系读研究生需要做到什么？</h3><p>—研究生需要带着一个目标去读。学会的知识将要更加结构化的记录</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>—不悔过去，不畏未来。每个人都应该会有年轻时候认知的局限。而时间能教会我们很多东西。时间到达一定长度的时候，就会发现那些曾经细微末节的改变，最后能长成能看到的样子。五年前的自己并不知道我那时候的选择是否正确。就如现在我也不会知道这个选择是否正确。但是如果人生能够重复，在相同的信息情况下我还是会选择去转系。</p><p>在这里需要感谢我的家庭让我人生再一次不会因为自己当年随意的选择而抱憾终生.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java Programming: Principles of Software Design</title>
      <link href="/2019/03/25/Java-Programming-Principles-of-Software-Design/"/>
      <url>/2019/03/25/Java-Programming-Principles-of-Software-Design/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="About-this-course"><a href="#About-this-course" class="headerlink" title="About this course"></a>About this course</h2><p>Coming Soon</p><hr><h2 id="Module-1-Searching-and-Filtering-data"><a href="#Module-1-Searching-and-Filtering-data" class="headerlink" title="Module 1 Searching and Filtering data"></a>Module 1 Searching and Filtering data</h2><h3 id="About-this-module"><a href="#About-this-module" class="headerlink" title="About this module"></a>About this module</h3><p>The first module introduce a data set containing details about earthquakes around the world. It ask to<br>1) Write a program that include multiple classes and arraylist of class types,<br>2) Find the maximum value in an ArrayList,<br>3) Use a Filter interface to search through data,<br>4) Implement interfaces with method signatures and 5) combine several filter together.</p><hr><h3 id="Relationships-Between-Classes"><a href="#Relationships-Between-Classes" class="headerlink" title="Relationships Between Classes"></a>Relationships Between Classes</h3><p>POJO - Plain Old Java Object - is an ordinary Java object, not bound by any special restriction and not requiring any class path.<br>The following code is essentially a POJO</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//Class</span><br><span class="line">public class QuakeEntry &#123;</span><br><span class="line">    private Location myLocation;</span><br><span class="line">    private String title;</span><br><span class="line">    private double depth;</span><br><span class="line">    private double magnitude;</span><br><span class="line">    public QuakeEntry(...)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class QuakeEntry &#123;</span><br><span class="line">    public Location getLocation()&#123;..</span><br><span class="line">    public double getDepth()&#123;...</span><br><span class="line">    public String getInfo()&#123;...</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Object</span><br><span class="line">public QuakeEntry(double lat, double lon, double mag, String t double d) &#123;</span><br><span class="line">    myLocation = new Location(lat, lon);</span><br><span class="line">    magnitude = mag;</span><br><span class="line">    title = t;</span><br><span class="line">    depth = d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Class in Java can have <strong>Has-A</strong> and <strong>Use-A</strong> relationship<br>C</p><hr><h3 id="Licensing-and-APIs"><a href="#Licensing-and-APIs" class="headerlink" title="Licensing and APIs"></a>Licensing and APIs</h3><p>API: Application programming interface - a set of subroutine definitions, communication protocols, and tools for building software. Benefit of use that includes 1) code are well tested, 2) good documentation, 3) follows standards.</p><blockquote><p>  Example of Android API (‘Location.java’)<br><a href="https://developer.android.com/reference/android/location/Location.html" target="_blank" rel="noopener">https://developer.android.com/reference/android/location/Location.html</a></p></blockquote><p>License: A license is an agreement between a developer and user on how a software product can be used.</p><blockquote><p>Example of License<br><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="noopener">https://www.apache.org/licenses/LICENSE-2.0</a></p></blockquote><hr><h4 id="Coding-notes-Searching-data"><a href="#Coding-notes-Searching-data" class="headerlink" title="Coding notes - Searching data"></a>Coding notes - Searching data</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// to check if a string start, contain or end with certain part</span><br><span class="line">public boolean startsWith(String prefix)</span><br><span class="line">public boolean endsWith(String prefix)</span><br><span class="line">// to check if a string start with certain prefix with an offset</span><br><span class="line">public boolean startsWith(String prefix, int toffset)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList&lt;QuakeEntry&gt; getClosest(ArrayList&lt;QuakeEntry&gt; quakeData, Location current, int howMany) &#123;</span><br><span class="line">    // Create an empty arraylist for return purpose</span><br><span class="line">    ArrayList&lt;QuakeEntry&gt; ret = new ArrayList&lt;QuakeEntry&gt;();</span><br><span class="line">    // Copy the original list</span><br><span class="line">    ArrayList&lt;QuakeEntry&gt; quakeData_copy = new ArrayList&lt;QuakeEntry&gt;(quakeData);</span><br><span class="line">    // Use the inner loop to go over the copied arraylist, searching for closest</span><br><span class="line">    // Use the outter loop to update return arraylist and copy arraylist</span><br><span class="line">    for (int i=0;i&lt;howMany;i++)&#123;</span><br><span class="line">        int miniindex=0;</span><br><span class="line">        for (int j=0;j&lt;quakeData_copy.size();j++)&#123;</span><br><span class="line">            QuakeEntry quake = quakeData_copy.get(j);</span><br><span class="line">            Location temploc = quake.getLocation();</span><br><span class="line">            if(temploc.distanceTo(current)&lt;quakeData_copy.get(miniindex).getLocation().distanceTo(current))&#123;</span><br><span class="line">            miniindex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ret.add(quakeData_copy.remove(miniindex));</span><br><span class="line">    &#125;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Coding-Assignment-Week-1"><a href="#Coding-Assignment-Week-1" class="headerlink" title="Coding Assignment Week 1"></a>Coding Assignment Week 1</h3><blockquote><p>Github: <a href="https://github.com/Miaooocat/Java_SoftwareDesignPrinciple_Coursera/tree/master/Week1" target="_blank" rel="noopener">https://github.com/Miaooocat/Java_SoftwareDesignPrinciple_Coursera/tree/master/Week1</a></p></blockquote><hr><h3 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h3><p>Classes can implement an interface:</p><pre><code>* Must define the promised methods* Can be treated as the interface type</code></pre><h4 id="Coding-notes-Filtering-data"><a href="#Coding-notes-Filtering-data" class="headerlink" title="Coding notes - Filtering data"></a>Coding notes - Filtering data</h4><p>First look at two filters to see similiarity:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList&lt;QuakeEntry&gt; filterByMagnitude(ArrayList&lt;QuakeEntry&gt; quakeData, double magMin) &#123;</span><br><span class="line">    ArrayList&lt;QuakeEntry&gt; answer = new ArrayList&lt;QuakeEntry&gt;();</span><br><span class="line">    for(QuakeEntry qe : quakeData) &#123;</span><br><span class="line">        if (qe.getMagnitude() &gt;= magMin) &#123;answer.add(qe);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">   return answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList&lt;QuakeEntry&gt; filterByDistanceFrom(ArrayList&lt;QuakeEntry&gt; quakeData, double distMax, Location from) &#123;</span><br><span class="line">    ArrayList&lt;QuakeEntry&gt; answer = new ArrayList&lt;QuakeEntry&gt;();</span><br><span class="line">    for(QuakeEntry qe : quakeData) &#123;</span><br><span class="line">        if (qe.getLocation().distanceTo(from) &lt;= distMax) &#123;answer.add(qe);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">   return answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The only differece is in the <strong>if block</strong>. Thus, we could parameterize the above code by filter. In here, filter is an interface.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList&lt;QuakeEntry&gt;</span><br><span class="line">filter (ArrayList&lt;QuakeEntry&gt; quakeData, Filter f) &#123;</span><br><span class="line">    ArrayList&lt;QuakeEntry&gt; answer = new ArrayList&lt;QuakeEntry&gt; ();</span><br><span class="line">    for (QuakeEntry qe : quakeData) &#123;</span><br><span class="line">        if (f.satisfies(qe)) &#123;answer.add(qe);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Filter &#123;</span><br><span class="line">    public boolean satisfies(QuakeEntry qe);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class MinMagFilter implements Filter &#123;</span><br><span class="line">    private double magMin;</span><br><span class="line">    public MinMagFilter(double min) &#123;</span><br><span class="line">        magMin = min;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean satisfies(QuakeEntry qe) &#123;</span><br><span class="line">        return qe.getMagnitude() &gt;= magMin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Filter f = new MinMagFilter(4.0);</span><br><span class="line">ArrayList&lt;QuakeEntry&gt; largeQuakes  = filter(list, f);</span><br><span class="line"></span><br><span class="line">f = new DistanceFilter(myLoc,100);</span><br><span class="line">ArrayList&lt;QuakeEntry&gt; shallowQuakes  = filter(list, f);</span><br></pre></td></tr></table></figure><p>How does Java know which <strong>f.satisified</strong> to call?</p><blockquote><p>The answer is Dynamic dispatch, which is a process of selecting which implementation of a polymorphic operation (method or function) to call at run time.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Software Development </category>
          
          <category> Course Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
