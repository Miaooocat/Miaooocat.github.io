<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java Programming: Principles of Software Design</title>
      <link href="/2019/03/25/Java-Programming-Principles-of-Software-Design/"/>
      <url>/2019/03/25/Java-Programming-Principles-of-Software-Design/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="About-this-course"><a href="#About-this-course" class="headerlink" title="About this course"></a>About this course</h2><p>Coming Soon</p><hr><h2 id="Module-1-Searching-and-Filtering-data"><a href="#Module-1-Searching-and-Filtering-data" class="headerlink" title="Module 1 Searching and Filtering data"></a>Module 1 Searching and Filtering data</h2><h3 id="About-this-module"><a href="#About-this-module" class="headerlink" title="About this module"></a>About this module</h3><p>The first module introduce a data set containing details about earthquakes around the world. It ask to<br>1) Write a program that include multiple classes and arraylist of class types,<br>2) Find the maximum value in an ArrayList,<br>3) Use a Filter interface to search through data,<br>4) Implement interfaces with method signatures and 5) combine several filter together.</p><hr><h3 id="Relationships-Between-Classes"><a href="#Relationships-Between-Classes" class="headerlink" title="Relationships Between Classes"></a>Relationships Between Classes</h3><p>POJO - Plain Old Java Object - is an ordinary Java object, not bound by any special restriction and not requiring any class path.<br>The following code is essentially a POJO</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//Class</span><br><span class="line">public class QuakeEntry &#123;</span><br><span class="line">    private Location myLocation;</span><br><span class="line">    private String title;</span><br><span class="line">    private double depth;</span><br><span class="line">    private double magnitude;</span><br><span class="line">    public QuakeEntry(...)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class QuakeEntry &#123;</span><br><span class="line">    public Location getLocation()&#123;..</span><br><span class="line">    public double getDepth()&#123;...</span><br><span class="line">    public String getInfo()&#123;...</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Object</span><br><span class="line">public QuakeEntry(double lat, double lon, double mag, String t double d) &#123;</span><br><span class="line">    myLocation = new Location(lat, lon);</span><br><span class="line">    magnitude = mag;</span><br><span class="line">    title = t;</span><br><span class="line">    depth = d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Class in Java can have <strong>Has-A</strong> and <strong>Use-A</strong> relationship<br>C</p><hr><h3 id="Licensing-and-APIs"><a href="#Licensing-and-APIs" class="headerlink" title="Licensing and APIs"></a>Licensing and APIs</h3><p>API: Application programming interface - a set of subroutine definitions, communication protocols, and tools for building software. Benefit of use that includes 1) code are well tested, 2) good documentation, 3) follows standards.</p><blockquote><p>  Example of Android API (‘Location.java’)<br><a href="https://developer.android.com/reference/android/location/Location.html" target="_blank" rel="noopener">https://developer.android.com/reference/android/location/Location.html</a></p></blockquote><p>License: A license is an agreement between a developer and user on how a software product can be used.</p><blockquote><p>Example of License<br><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="noopener">https://www.apache.org/licenses/LICENSE-2.0</a></p></blockquote><hr><h4 id="Coding-notes-Searching-data"><a href="#Coding-notes-Searching-data" class="headerlink" title="Coding notes - Searching data"></a>Coding notes - Searching data</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// to check if a string start, contain or end with certain part</span><br><span class="line">public boolean startsWith(String prefix)</span><br><span class="line">public boolean endsWith(String prefix)</span><br><span class="line">// to check if a string start with certain prefix with an offset</span><br><span class="line">public boolean startsWith(String prefix, int toffset)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList&lt;QuakeEntry&gt; getClosest(ArrayList&lt;QuakeEntry&gt; quakeData, Location current, int howMany) &#123;</span><br><span class="line">    // Create an empty arraylist for return purpose</span><br><span class="line">    ArrayList&lt;QuakeEntry&gt; ret = new ArrayList&lt;QuakeEntry&gt;();</span><br><span class="line">    // Copy the original list</span><br><span class="line">    ArrayList&lt;QuakeEntry&gt; quakeData_copy = new ArrayList&lt;QuakeEntry&gt;(quakeData);</span><br><span class="line">    // Use the inner loop to go over the copied arraylist, searching for closest</span><br><span class="line">    // Use the outter loop to update return arraylist and copy arraylist</span><br><span class="line">    for (int i=0;i&lt;howMany;i++)&#123;</span><br><span class="line">        int miniindex=0;</span><br><span class="line">        for (int j=0;j&lt;quakeData_copy.size();j++)&#123;</span><br><span class="line">            QuakeEntry quake = quakeData_copy.get(j);</span><br><span class="line">            Location temploc = quake.getLocation();</span><br><span class="line">            if(temploc.distanceTo(current)&lt;quakeData_copy.get(miniindex).getLocation().distanceTo(current))&#123;</span><br><span class="line">            miniindex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ret.add(quakeData_copy.remove(miniindex));</span><br><span class="line">    &#125;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Coding-Assignment-Week-1"><a href="#Coding-Assignment-Week-1" class="headerlink" title="Coding Assignment Week 1"></a>Coding Assignment Week 1</h3><blockquote><p>Github: <a href="https://github.com/Miaooocat/Java_SoftwareDesignPrinciple_Coursera/tree/master/Week1" target="_blank" rel="noopener">https://github.com/Miaooocat/Java_SoftwareDesignPrinciple_Coursera/tree/master/Week1</a></p></blockquote><hr><h3 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h3><p>Classes can implement an interface:</p><pre><code>* Must define the promised methods* Can be treated as the interface type</code></pre><h4 id="Coding-notes-Filtering-data"><a href="#Coding-notes-Filtering-data" class="headerlink" title="Coding notes - Filtering data"></a>Coding notes - Filtering data</h4><p>First look at two filters to see similiarity:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList&lt;QuakeEntry&gt; filterByMagnitude(ArrayList&lt;QuakeEntry&gt; quakeData, double magMin) &#123;</span><br><span class="line">    ArrayList&lt;QuakeEntry&gt; answer = new ArrayList&lt;QuakeEntry&gt;();</span><br><span class="line">    for(QuakeEntry qe : quakeData) &#123;</span><br><span class="line">        if (qe.getMagnitude() &gt;= magMin) &#123;answer.add(qe);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">   return answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList&lt;QuakeEntry&gt; filterByDistanceFrom(ArrayList&lt;QuakeEntry&gt; quakeData, double distMax, Location from) &#123;</span><br><span class="line">    ArrayList&lt;QuakeEntry&gt; answer = new ArrayList&lt;QuakeEntry&gt;();</span><br><span class="line">    for(QuakeEntry qe : quakeData) &#123;</span><br><span class="line">        if (qe.getLocation().distanceTo(from) &lt;= distMax) &#123;answer.add(qe);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">   return answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The only differece is in the <strong>if block</strong>. Thus, we could parameterize the above code by filter. In here, filter is an interface.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList&lt;QuakeEntry&gt;</span><br><span class="line">filter (ArrayList&lt;QuakeEntry&gt; quakeData, Filter f) &#123;</span><br><span class="line">    ArrayList&lt;QuakeEntry&gt; answer = new ArrayList&lt;QuakeEntry&gt; ();</span><br><span class="line">    for (QuakeEntry qe : quakeData) &#123;</span><br><span class="line">        if (f.satisfies(qe)) &#123;answer.add(qe);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Filter &#123;</span><br><span class="line">    public boolean satisfies(QuakeEntry qe);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class MinMagFilter implements Filter &#123;</span><br><span class="line">    private double magMin;</span><br><span class="line">    public MinMagFilter(double min) &#123;</span><br><span class="line">        magMin = min;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean satisfies(QuakeEntry qe) &#123;</span><br><span class="line">        return qe.getMagnitude() &gt;= magMin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Filter f = new MinMagFilter(4.0);</span><br><span class="line">ArrayList&lt;QuakeEntry&gt; largeQuakes  = filter(list, f);</span><br><span class="line"></span><br><span class="line">f = new DistanceFilter(myLoc,100);</span><br><span class="line">ArrayList&lt;QuakeEntry&gt; shallowQuakes  = filter(list, f);</span><br></pre></td></tr></table></figure><p>How does Java know which <strong>f.satisified</strong> to call?</p><blockquote><p>The answer is Dynamic dispatch, which is a process of selecting which implementation of a polymorphic operation (method or function) to call at run time.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Software Development </category>
          
          <category> Course Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
